name: Build Wheels

on: [ push ]

jobs:
  build_wheels:
    name: py${{ matrix.python }} on ${{ matrix.os }} using ${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_TEST_REQUIRES: numpy
      CIBW_TEST_COMMAND: python -c "import bcolz; bcolz.test()"
      CIBW_BUILD_VERBOSITY: 1

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
#        os: [ macos-latest, ubuntu-latest, windows-latest ]
        os: [ macos-latest ]
        python: [ 37, 38, 39 ]
        bitness: [ 64 ]
        manylinux_image: [ manylinux2010, manylinux2014 ]
        include:
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
#          - os: windows-latest
#            bitness: 64
#            platform_id: win_amd64
#          - os: ubuntu-latest
#            bitness: 64
#            platform_id: manylinux_x86_64
        exclude:
#          - os: windows-latest
#            manylinux_image: manylinux2010
          - os: macos-latest
            manylinux_image: manylinux2010

    steps:
      - name: Checkout bcolz
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build and test wheels
        uses: joerick/cibuildwheel@v2.0.0
        env:
          CIBW_ENVIRONMENT: DISABLE_BCOLZ_AVX2=true
                            MACOSX_DEPLOYMENT_TARGET=10.15
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Build sdist
        run: pipx run --spec build pyproject-build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
#    needs: [ build_wheels, build_sdist ]
    needs: [ build_wheels ]
    runs-on: ubuntu-latest
    # upload to PyPI on every push (for now)
    if: github.event_name == 'push'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
#          password: ${{ secrets.PYPITEST_TOKEN }}
#          repository_url: https://test.pypi.org/legacy/